---
- name: Create worker {{ item.index }} virtual machine
  vars:
    vm_name: "compute-{{ item.index }}.sandbox.okd.local"
    ip: "{{ item.ip }}"
    mac: "{{ item.mac }}"
    images_path: "/home/{{ ansible_user_id }}/.okd/images"
    fedora_coreos_cloud_image_name: "fedora-coreos-31.20200406.20.0-qemu.x86_64.qcow2"
    vms_path: "/home/{{ ansible_user_id }}/.okd/vms"
    dns_ip: "10.0.6.10"
    dns_name: "compute-{{ item.index }}.sandbox.okd.local"
  block:
    - name: List virtual machines
      virt:
        command: list_vms
        uri: "qemu:///session"
      register: vms
    - name: Create {{ vm_name }} virtual machine
      block:
        - name: Create {{ vm_name }} virtual machine directory
          file:
            path: "{{ vms_path }}/{{ vm_name }}"
            state: directory
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
        - name: Copy fedora coreos cloud image from images to {{ vm_name }} virtual machine directory
          copy:
            src: "{{ images_path }}/{{ fedora_coreos_cloud_image_name }}"
            dest: "{{ vms_path }}/{{ vm_name }}/{{ fedora_coreos_cloud_image_name }}"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
            force: no
        - name: Resize image to add 25G more space
          shell: qemu-img resize {{ vms_path }}/{{ vm_name }}/{{ fedora_coreos_cloud_image_name }} 25G
        - name: Define {{ vm_name }} virtual machine into kvm
          virt:
            command: define
            name: "{{ vm_name }}"
            xml: '{{ lookup("template", "templates/vm.xml.j2") }}'
            uri: "qemu:///session"
          vars:
            name: "{{ vm_name }}"
            memory: 8192
            vcpus: 2
            disk_file: "{{ vms_path }}/{{ vm_name }}/{{ fedora_coreos_cloud_image_name }}"
            vm_mac: "{{ mac }}"
            vm_bridge: "virbr1"
            fw_cfg: "name=opt/com.coreos/config,file=/tmp/master.ign"
        - name: Start {{ vm_name }} virtual machine
          virt:
            command: start
            name: "{{ vm_name }}"
            autostart: yes
            uri: "qemu:///session"
        - name: |
            Wait for port 22.
          wait_for:
            host: "{{ ip }}"
            port: 22
            state: drained
            delay: 10
        - name: |
            Add {{ vm_name }} virtual machine to host known_hosts - need to retry as ssh is not available yet after the port 22 is open.
            An empty valide response can be returned :(
          block:
            - name: Retrieve dns virtual machine public key
              shell: ssh-keyscan -t ssh-rsa {{ ip }}
              register: task_result
              until: task_result.rc == 0 and task_result.stdout != ''
              retries: 120
              delay: 5
            - debug:
                msg: "{{ task_result }}"
            - name: Write dns virtual machine public key into Host known hosts
              lineinfile:
                path: /home/{{ ansible_user_id }}/.ssh/known_hosts
                insertafter: EOF
                line: "{{ dns_name }},{{ task_result.stdout }}"
                backup: yes
        - name: |
            Wait until unprivilegied {{ ansible_user_id }} can loggin in using ssh to avoid this message:
#            fatal: [localhost]: FAILED! => {"changed": true, "cmd": "ssh core@10.0.5.59 'dig test.apps.sandbox.okd.local +short'", "delta": "0:00:00.102321", "end": "2020-04-11 19:56:50.886226", "msg": "non-zero return code", "rc": 255, "start": "2020-04-11 19:56:50.783905", "stderr": "\"System is booting up. Unprivileged users are not permitted to log in yet. Please come back later. For technical details, see pam_nologin(8).\"\nAuthentication failed.", "stderr_lines": ["\"System is booting up. Unprivileged users are not permitted to log in yet. Please come back later. For technical details, see pam_nologin(8).\"", "Authentication failed."], "stdout": "", "stdout_lines": []}
          shell: ssh {{ ansible_user_id }}@{{ ip }} 'date'
          register: task_result
          until: task_result.rc == 0
          retries: 120
          delay: 5
      when: vm_name not in vms.list_vms

    - name: Should {{ vm_name }} virtual machine is well configured
      block:
        - name: Check dns virtual machine is resolvable in {{ vm_name }} VM
          block:
            - name: Execute dns virtual machine resolution in {{ vm_name }} VM
              shell: ssh {{ ansible_user_id }}@{{ ip }} 'dig dns.okd.local +short'
              register: ip_resolved
            - debug:
                msg: "{{ ip_resolved }}"
            - name: Ensure ip resolved to dns virtual machine ip
              assert:
                that:
                  - "'{{ dns_ip }}' == ip_resolved.stdout"
        - name: Should container-registry.sandbox.okd.local on {{ vm_name }} virtual machine resolve to container-registry.sandbox.okd.local
          block:
            - name: Execute Host resolution
              shell: ssh {{ ansible_user_id }}@{{ ip }} 'dig container-registry.sandbox.okd.local +short'
              register: ip_resolved
            - debug:
                msg: "{{ ip_resolved }}"
            - name: Ensure ip resolved to container registry virtual machine ip
              assert:
                that:
                  - "'10.0.5.10' == ip_resolved.stdout"
        - name: Should external dns resolution is working in {{ vm_name }} virtual machine
          block:
            - name: Execute external DNS resolution
              shell: ssh {{ ansible_user_id }}@{{ ip }} 'dig google.fr +short'
              register: ips_resolved
            - debug:
                msg: "{{ ips_resolved }}"
            - name: Ensure external host is resolved
              assert:
                that:
                  - "ips_resolved is defined"
                  - "ips_resolved.stdout_lines is defined"
                  - "ips_resolved.stdout_lines|length > 0"

#    - name: Approve current pending certs
#      shell:
#        cmd: oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs oc adm certificate approve
#      args:
#        executable: /bin/bash