---
- name: Create control_plane_0 okd virtual machine
  hosts: localhost
  vars:
    images_path: "/home/{{ ansible_user_id }}/.okd/images"
    fedora_coreos_cloud_image_name: "fedora-coreos-31.20200310.3.0-qemu.x86_64.qcow2"
    vms_path: "/home/{{ ansible_user_id }}/.okd/vms"
    ip: "10.0.5.59"
  tasks:
    - name: Create control_plane_0 virtual machine directory
      file:
        path: "{{ vms_path }}/control_plane_0"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
    - name: Copy fedora coreos cloud image from images to control_plane_0 vm
      copy:
        src: "{{ images_path }}/{{ fedora_coreos_cloud_image_name }}"
        dest: "{{ vms_path }}/control_plane_0/{{ fedora_coreos_cloud_image_name }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        force: no
    - name: Define control_plane_0 virtual machine
      virt:
        command: define
        name: "control_plane_0"
        xml: '{{ lookup("template", "templates/vm.xml.j2") }}'
        uri: "qemu:///session"
      vars:
        name: "control_plane_0"
        memory: 8192
        vcpus: 1
        disk_file: "{{ vms_path }}/control_plane_0/{{ fedora_coreos_cloud_image_name }}"
        vm_mac: "52:54:00:00:05:59"
        vm_bridge: "virbr-okd-cl0"
        fw_cfg: "name=opt/com.coreos/config,file=/tmp/master.ign"
    - name: Start control_plane_0 vm
      virt:
        command: start
        name: "control_plane_0"
        autostart: yes
        uri: "qemu:///session"
#    - name: Wait for port 22
#      wait_for:
#        host: "{{ ip }}"
#        port: 22
#        state: drained
#        delay: 10
#    - name: Add control_plane_0 host to known_hosts - need to retry as ssh is not available yet after the port 22 is open
#      shell: |
#        while [ -z "$knownHost" ]
#        do
#          sleep 1
#          knownHost=$(ssh-keyscan -t ssh-rsa {{ ip }})
#        done
#        echo "$knownHost" >> "/home/{{ ansible_user_id }}/.ssh/known_hosts"
#      args:
#        executable: /bin/bash
#    - name: Check wildcard *.apps.ocp4-cluster-001.sandbox.okd on control_plane_0 VM resolve to load balander
#      block:
#        - name: Execute Host resolution
#          shell: ssh core@{{ ip }} 'dig test.apps.ocp4-cluster-001.sandbox.okd +short'
#          register: ip_resolved
#        - debug:
#            msg: "{{ ip_resolved }}"
#        - name: Ensure ip resolved to dns vm ip
#          assert:
#            that:
#              - "'10.0.5.57' == ip_resolved.stdout"
#    - name: Check external dns resolution is working in {{ vm_name }} VM
#      block:
#        - name: Execute Host resolution
#          shell: ssh core@{{ ip }} 'dig google.fr +short'
#          register: ips_resolved
#        - debug:
#            msg: "{{ ips_resolved }}"
#        - name: Ensure external host is resolved
#          assert:
#            that:
#              - "ips_resolved is defined"
#              - "ips_resolved.stdout_lines is defined"
#              - "ips_resolved.stdout_lines|length > 0"

#Wait for control_plane_0 to be up ... it may takes a lot of times ~ 20 min depending on network traffic
